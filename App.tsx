import React, { useState, useCallback, useEffect } from 'react';
import SearchBar from './components/SearchBar';
import CurrentWeather from './components/CurrentWeather';
import Forecast from './components/Forecast';
import AiSummary from './components/AiSummary';
import LoadingSpinner from './components/LoadingSpinner';
import { getWeatherData, getWeatherSummary } from './services/geminiService';
import type { WeatherData } from './types';

const App: React.FC = () => {
  const [location, setLocation] = useState<string>('');
  const [weatherData, setWeatherData] = useState<WeatherData | null>(null);
  const [aiSummary, setAiSummary] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [currentTime, setCurrentTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);
    return () => clearInterval(timer);
  }, []);

  const handleSearch = useCallback(async (searchLocation: string) => {
    if (!searchLocation) {
        setLoading(false);
        return;
    };
    setLoading(true);
    setError(null);
    setWeatherData(null);
    setAiSummary('');

    try {
      const data = await getWeatherData(searchLocation);
      if (!data || !data.current || !data.forecast) {
        throw new Error("Invalid weather data received.");
      }
      setWeatherData(data);
      const displayLocation = data.location || searchLocation;
      setLocation(displayLocation);
      localStorage.setItem('lastWeatherLocation', displayLocation);

      const summary = await getWeatherSummary(data);
      setAiSummary(summary);

    } catch (err) {
      console.error(err);
      setError('Could not fetch weather data. Please try another location.');
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    const fetchInitialWeather = () => {
      const fetchFromStorageOrDelhi = () => {
        const lastLocation = localStorage.getItem('lastWeatherLocation');
        handleSearch(lastLocation || 'Delhi');
      };

      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const { latitude, longitude } = position.coords;
            handleSearch(`${latitude},${longitude}`);
          },
          () => {
            fetchFromStorageOrDelhi();
          }
        );
      } else {
        fetchFromStorageOrDelhi();
      }
    };
    fetchInitialWeather();
  }, [handleSearch]);


  return (
    <div className="min-h-screen w-full bg-gray-100 text-gray-800 flex flex-col items-center p-4 sm:p-6 lg:p-8">
      <div className="w-full max-w-4xl min-h-[85vh] bg-white/70 backdrop-blur-lg rounded-2xl shadow-lg p-6 sm:p-8 flex flex-col border border-gray-200">
        <header className="w-full mb-6">
          <h1 className="text-3xl sm:text-4xl font-bold text-center mb-2 text-gray-800">AI Weather</h1>
          <p className="text-center text-gray-500">Your intelligent weather forecast</p>
          <SearchBar onSearch={handleSearch} loading={loading} />
        </header>

        <main className="flex-grow flex flex-col items-center justify-center">
          {loading && <LoadingSpinner />}
          {error && <div className="text-center text-red-600 bg-red-100 p-4 rounded-lg border border-red-200">{error}</div>}
          
          {!loading && !error && weatherData && (
            <div className="w-full animate-fade-in space-y-8">
              <CurrentWeather data={weatherData.current} location={location} currentTime={currentTime} />
              <AiSummary summary={aiSummary} />
              <Forecast data={weatherData.forecast} />
            </div>
          )}
        </main>
      </div>
      <footer className="text-center mt-6 text-gray-400 text-sm max-w-4xl mx-auto">
        <p>Powered by Google Gemini</p>
        <p className="mt-1 text-gray-400">Weather data is generated by an AI model and may contain inaccuracies. Please verify with official sources for critical decisions.</p>
      </footer>
    </div>
  );
};

export default App;